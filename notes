## Todo

- let validation be in controller
- shift insert update and other code in repos
- get data from service providers
- Create seperate Controller and Repo for Comment
- improve file name to store in storage/images
- add confirm on delete
- create menus
- when user logs in or registers, show redirect to posts instead of blank dashboard

## Changes in assignment

- combine posts and comments
    - Show posts, when post is clicked, show comments in pop up / modal
- skip sending email
- `invalidLoginAttempts` column is not required. It is managed by Laravel itself. Make sure to keep the timeout settings as requirement

## Improvements

- try to get timezone from .env instead of hard coding in app.php
- soft delete
- indexing
- logout user if he's marked inactive while he's logged in

## Queries

- what does autocomplete attribute do if a custom text is provided

### Conditions to implement

#### On login

- check if user isBlocked AND isActive

#### On Add Post
- check if user has reached max number of posts

#### On Like
- check if user has liked max number of permitted likes


## Useful commands

### required to show images in img tag
- It links storage with public direcotry\
>`php artisan storage:link`

### make migration

#### create table
>`php artisan make:migration create_comments_table`
#### alter table
>`php artisan make:migration add_columns_to_users --table=users`


## Modal

### show model
>`php artisan model:show User`


## Set up Roles
>`composer require spatie/laravel-permission`

>`php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"`
`php artisan migrate`

#### Create following model
>`namespace App\Models;`
>
>`use Spatie\Permission\Models\Role as SpatieRole;`
>
>`class Role extends SpatieRole`\
>`{`\
>    `// Additional customization if needed`\
>`}`

#### in User model. Add following lines:

>`use Spatie\Permission\Traits\HasRoles;`
>
>`use HasRoles`

#### Create a role

>`Role::create(['name' => 'user']);`

#### When user registers

>`use Spatie\Permission\Models\Role;`
>
>`$role = Role::create(['name' => 'user']);`
>`$user->assignRole($role);`

#### use / check role
>`$user = $request->user();`
>`$role = $user->getRoleNames()->first();`
or
>`$role = $user->roles->first()->name;`
or
>`auth()->user()->hasRole('admin')`

## Service Provider

### Create Repository RepositoryServiceProvider

>`php artisan make:provider RepositoryServiceProvider`

### bind repository with repository service provider under register method
>`$this->app->bind(PostRepositoryInterface::class, PostRepository::class);`

### load RepositoryServiceProvider
- add this provider in config/app.php under providers
>`App\Providers\RepositoryServiceProvider::class`